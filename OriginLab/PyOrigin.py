# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PyOrigin')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PyOrigin')
    _PyOrigin = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyOrigin', [dirname(__file__)])
        except ImportError:
            import _PyOrigin
            return _PyOrigin
        try:
            _mod = imp.load_module('_PyOrigin', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PyOrigin = swig_import_helper()
    del swig_import_helper
else:
    import _PyOrigin
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyOrigin.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _PyOrigin.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyOrigin.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyOrigin.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyOrigin.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyOrigin.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyOrigin.SwigPyIterator_copy(self)

    def next(self):
        return _PyOrigin.SwigPyIterator_next(self)

    def __next__(self):
        return _PyOrigin.SwigPyIterator___next__(self)

    def previous(self):
        return _PyOrigin.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyOrigin.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyOrigin.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyOrigin.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyOrigin.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyOrigin.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyOrigin.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyOrigin.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PyOrigin.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyOrigin.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyOrigin.IntVector___nonzero__(self)

    def __bool__(self):
        return _PyOrigin.IntVector___bool__(self)

    def __len__(self):
        return _PyOrigin.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _PyOrigin.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyOrigin.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyOrigin.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyOrigin.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyOrigin.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyOrigin.IntVector___setitem__(self, *args)

    def pop(self):
        return _PyOrigin.IntVector_pop(self)

    def append(self, x):
        return _PyOrigin.IntVector_append(self, x)

    def empty(self):
        return _PyOrigin.IntVector_empty(self)

    def size(self):
        return _PyOrigin.IntVector_size(self)

    def swap(self, v):
        return _PyOrigin.IntVector_swap(self, v)

    def begin(self):
        return _PyOrigin.IntVector_begin(self)

    def end(self):
        return _PyOrigin.IntVector_end(self)

    def rbegin(self):
        return _PyOrigin.IntVector_rbegin(self)

    def rend(self):
        return _PyOrigin.IntVector_rend(self)

    def clear(self):
        return _PyOrigin.IntVector_clear(self)

    def get_allocator(self):
        return _PyOrigin.IntVector_get_allocator(self)

    def pop_back(self):
        return _PyOrigin.IntVector_pop_back(self)

    def erase(self, *args):
        return _PyOrigin.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _PyOrigin.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyOrigin.IntVector_push_back(self, x)

    def front(self):
        return _PyOrigin.IntVector_front(self)

    def back(self):
        return _PyOrigin.IntVector_back(self)

    def assign(self, n, x):
        return _PyOrigin.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _PyOrigin.IntVector_resize(self, *args)

    def insert(self, *args):
        return _PyOrigin.IntVector_insert(self, *args)

    def reserve(self, n):
        return _PyOrigin.IntVector_reserve(self, n)

    def capacity(self):
        return _PyOrigin.IntVector_capacity(self)
    __swig_destroy__ = _PyOrigin.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _PyOrigin.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyOrigin.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyOrigin.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PyOrigin.DoubleVector___bool__(self)

    def __len__(self):
        return _PyOrigin.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PyOrigin.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyOrigin.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyOrigin.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyOrigin.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyOrigin.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyOrigin.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PyOrigin.DoubleVector_pop(self)

    def append(self, x):
        return _PyOrigin.DoubleVector_append(self, x)

    def empty(self):
        return _PyOrigin.DoubleVector_empty(self)

    def size(self):
        return _PyOrigin.DoubleVector_size(self)

    def swap(self, v):
        return _PyOrigin.DoubleVector_swap(self, v)

    def begin(self):
        return _PyOrigin.DoubleVector_begin(self)

    def end(self):
        return _PyOrigin.DoubleVector_end(self)

    def rbegin(self):
        return _PyOrigin.DoubleVector_rbegin(self)

    def rend(self):
        return _PyOrigin.DoubleVector_rend(self)

    def clear(self):
        return _PyOrigin.DoubleVector_clear(self)

    def get_allocator(self):
        return _PyOrigin.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PyOrigin.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PyOrigin.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _PyOrigin.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyOrigin.DoubleVector_push_back(self, x)

    def front(self):
        return _PyOrigin.DoubleVector_front(self)

    def back(self):
        return _PyOrigin.DoubleVector_back(self)

    def assign(self, n, x):
        return _PyOrigin.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PyOrigin.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PyOrigin.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PyOrigin.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PyOrigin.DoubleVector_capacity(self)
    __swig_destroy__ = _PyOrigin.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _PyOrigin.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyOrigin.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyOrigin.StringVector___nonzero__(self)

    def __bool__(self):
        return _PyOrigin.StringVector___bool__(self)

    def __len__(self):
        return _PyOrigin.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PyOrigin.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyOrigin.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyOrigin.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyOrigin.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyOrigin.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyOrigin.StringVector___setitem__(self, *args)

    def pop(self):
        return _PyOrigin.StringVector_pop(self)

    def append(self, x):
        return _PyOrigin.StringVector_append(self, x)

    def empty(self):
        return _PyOrigin.StringVector_empty(self)

    def size(self):
        return _PyOrigin.StringVector_size(self)

    def swap(self, v):
        return _PyOrigin.StringVector_swap(self, v)

    def begin(self):
        return _PyOrigin.StringVector_begin(self)

    def end(self):
        return _PyOrigin.StringVector_end(self)

    def rbegin(self):
        return _PyOrigin.StringVector_rbegin(self)

    def rend(self):
        return _PyOrigin.StringVector_rend(self)

    def clear(self):
        return _PyOrigin.StringVector_clear(self)

    def get_allocator(self):
        return _PyOrigin.StringVector_get_allocator(self)

    def pop_back(self):
        return _PyOrigin.StringVector_pop_back(self)

    def erase(self, *args):
        return _PyOrigin.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _PyOrigin.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyOrigin.StringVector_push_back(self, x)

    def front(self):
        return _PyOrigin.StringVector_front(self)

    def back(self):
        return _PyOrigin.StringVector_back(self)

    def assign(self, n, x):
        return _PyOrigin.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PyOrigin.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PyOrigin.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PyOrigin.StringVector_reserve(self, n)

    def capacity(self):
        return _PyOrigin.StringVector_capacity(self)
    __swig_destroy__ = _PyOrigin.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _PyOrigin.StringVector_swigregister
StringVector_swigregister(StringVector)

class CPyOriginBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginBase
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyOriginBase_IsValid(self)
CPyOriginBase_swigregister = _PyOrigin.CPyOriginBase_swigregister
CPyOriginBase_swigregister(CPyOriginBase)

class CPyOriginObject(CPyOriginBase):
    __swig_setmethods__ = {}
    for _s in [CPyOriginBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginObject
    __del__ = lambda self: None

    def __str__(self):
        return _PyOrigin.CPyOriginObject___str__(self)

    def __len__(self):
        return _PyOrigin.CPyOriginObject___len__(self)

    def GetName(self):
        return _PyOrigin.CPyOriginObject_GetName(self)

    def SetName(self, *args):
        return _PyOrigin.CPyOriginObject_SetName(self, *args)

    def GetLongName(self):
        return _PyOrigin.CPyOriginObject_GetLongName(self)

    def SetLongName(self, str):
        return _PyOrigin.CPyOriginObject_SetLongName(self, str)

    def Destroy(self, *args):
        return _PyOrigin.CPyOriginObject_Destroy(self, *args)
    Name = property(GetName, SetName)

    def LT_execute(self, lpcszScript):
        return _PyOrigin.CPyOriginObject_LT_execute(self, lpcszScript)

    def GetTheme(self):
        return _PyOrigin.CPyOriginObject_GetTheme(self)

    def SetTheme(self, pTheme):
        return _PyOrigin.CPyOriginObject_SetTheme(self, pTheme)

    def GetStorageNames(self, *args):
        return _PyOrigin.CPyOriginObject_GetStorageNames(self, *args)

    def GetBinaryStorage(self, strName):
        return _PyOrigin.CPyOriginObject_GetBinaryStorage(self, strName)

    def GetShow(self):
        return _PyOrigin.CPyOriginObject_GetShow(self)

    def SetShow(self, bShow):
        return _PyOrigin.CPyOriginObject_SetShow(self, bShow)

    def GetIndex(self):
        return _PyOrigin.CPyOriginObject_GetIndex(self)

    def SetIndex(self, nIndex):
        return _PyOrigin.CPyOriginObject_SetIndex(self, nIndex)

    def GetParent(self):
        return _PyOrigin.CPyOriginObject_GetParent(self)

    def GetComments(self):
        return _PyOrigin.CPyOriginObject_GetComments(self)

    def SetComments(self, str, bUndo=False):
        return _PyOrigin.CPyOriginObject_SetComments(self, str, bUndo)
    LongName = property(GetLongName, SetLongName)
    Show = property(GetShow, SetShow)
    Index = property(GetIndex, SetIndex)
    Comments = property(GetComments, SetComments)
    Theme = property(GetTheme, SetTheme)
CPyOriginObject_swigregister = _PyOrigin.CPyOriginObject_swigregister
CPyOriginObject_swigregister(CPyOriginObject)

class CPyPageBase(CPyOriginObject):
    __swig_setmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyPageBase, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyPageBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyPageBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyPageBase
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyPageBase_IsValid(self)

    def GetType(self):
        return _PyOrigin.CPyPageBase_GetType(self)

    def GetFolder(self):
        return _PyOrigin.CPyPageBase_GetFolder(self)
    Type = property(GetType, 0)
    Folder = property(GetFolder, 0)
CPyPageBase_swigregister = _PyOrigin.CPyPageBase_swigregister
CPyPageBase_swigregister(CPyPageBase)

class CPyPage(CPyPageBase):
    __swig_setmethods__ = {}
    for _s in [CPyPageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyPage, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyPageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyPage
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyPage_IsValid(self)

    def __len__(self):
        return _PyOrigin.CPyPage___len__(self)

    def AddLayer(self, *args):
        return _PyOrigin.CPyPage_AddLayer(self, *args)

    def Layers(self, *args):
        return _PyOrigin.CPyPage_Layers(self, *args)

    def __iter__(self):
        return _PyOrigin.CPyPage___iter__(self)
CPyPage_swigregister = _PyOrigin.CPyPage_swigregister
CPyPage_swigregister(CPyPage)

class CPyPageBaseI(CPyPageBase):
    __swig_setmethods__ = {}
    for _s in [CPyPageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyPageBaseI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyPageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyPageBaseI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyPageBaseI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyPageBaseI
    __del__ = lambda self: None
CPyPageBaseI_swigregister = _PyOrigin.CPyPageBaseI_swigregister
CPyPageBaseI_swigregister(CPyPageBaseI)

class CPyPageI(CPyPage):
    __swig_setmethods__ = {}
    for _s in [CPyPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyPageI
    __del__ = lambda self: None
CPyPageI_swigregister = _PyOrigin.CPyPageI_swigregister
CPyPageI_swigregister(CPyPageI)

class CPyGraphPage(CPyPage):
    __swig_setmethods__ = {}
    for _s in [CPyPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyGraphPage, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyGraphPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyGraphPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyGraphPage
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyGraphPage_IsValid(self)

    def GetPageViewMode(self):
        return _PyOrigin.CPyGraphPage_GetPageViewMode(self)

    def SetPageViewMode(self, nValue):
        return _PyOrigin.CPyGraphPage_SetPageViewMode(self, nValue)

    def GetHeight(self):
        return _PyOrigin.CPyGraphPage_GetHeight(self)

    def SetHeight(self, dHeight):
        return _PyOrigin.CPyGraphPage_SetHeight(self, dHeight)

    def GetWidth(self):
        return _PyOrigin.CPyGraphPage_GetWidth(self)

    def SetWidth(self, dWidth):
        return _PyOrigin.CPyGraphPage_SetWidth(self, dWidth)

    def Layers(self, *args):
        return _PyOrigin.CPyGraphPage_Layers(self, *args)

    def __getitem__(self, *args):
        return _PyOrigin.CPyGraphPage___getitem__(self, *args)

    def __iter__(self):
        return _PyOrigin.CPyGraphPage___iter__(self)
    PageViewMode = property(GetPageViewMode, SetPageViewMode)
    Height = property(GetHeight, SetHeight)
    Width = property(GetWidth, SetWidth)
CPyGraphPage_swigregister = _PyOrigin.CPyGraphPage_swigregister
CPyGraphPage_swigregister(CPyGraphPage)

class CPyGraphPageI(CPyGraphPage):
    __swig_setmethods__ = {}
    for _s in [CPyGraphPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyGraphPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyGraphPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyGraphPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyGraphPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyGraphPageI
    __del__ = lambda self: None
CPyGraphPageI_swigregister = _PyOrigin.CPyGraphPageI_swigregister
CPyGraphPageI_swigregister(CPyGraphPageI)

class CPyLayoutPage(CPyPage):
    __swig_setmethods__ = {}
    for _s in [CPyPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyLayoutPage, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyLayoutPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyLayoutPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyLayoutPage
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyLayoutPage_IsValid(self)
CPyLayoutPage_swigregister = _PyOrigin.CPyLayoutPage_swigregister
CPyLayoutPage_swigregister(CPyLayoutPage)

class CPyLayoutPageI(CPyLayoutPage):
    __swig_setmethods__ = {}
    for _s in [CPyLayoutPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyLayoutPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyLayoutPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyLayoutPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyLayoutPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyLayoutPageI
    __del__ = lambda self: None
CPyLayoutPageI_swigregister = _PyOrigin.CPyLayoutPageI_swigregister
CPyLayoutPageI_swigregister(CPyLayoutPageI)

class CPyWorksheetPage(CPyPage):
    __swig_setmethods__ = {}
    for _s in [CPyPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyWorksheetPage, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyWorksheetPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyWorksheetPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyWorksheetPage
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyWorksheetPage_IsValid(self)

    def Layers(self, *args):
        return _PyOrigin.CPyWorksheetPage_Layers(self, *args)

    def __iter__(self):
        return _PyOrigin.CPyWorksheetPage___iter__(self)

    def __getitem__(self, *args):
        return _PyOrigin.CPyWorksheetPage___getitem__(self, *args)
CPyWorksheetPage_swigregister = _PyOrigin.CPyWorksheetPage_swigregister
CPyWorksheetPage_swigregister(CPyWorksheetPage)

class CPyWorksheetPageI(CPyWorksheetPage):
    __swig_setmethods__ = {}
    for _s in [CPyWorksheetPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyWorksheetPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyWorksheetPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyWorksheetPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyWorksheetPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyWorksheetPageI
    __del__ = lambda self: None
CPyWorksheetPageI_swigregister = _PyOrigin.CPyWorksheetPageI_swigregister
CPyWorksheetPageI_swigregister(CPyWorksheetPageI)

class CPyMatrixPage(CPyPage):
    __swig_setmethods__ = {}
    for _s in [CPyPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyMatrixPage, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyMatrixPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyMatrixPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyMatrixPage
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyMatrixPage_IsValid(self)

    def Layers(self, *args):
        return _PyOrigin.CPyMatrixPage_Layers(self, *args)

    def __iter__(self):
        return _PyOrigin.CPyMatrixPage___iter__(self)

    def __getitem__(self, *args):
        return _PyOrigin.CPyMatrixPage___getitem__(self, *args)
CPyMatrixPage_swigregister = _PyOrigin.CPyMatrixPage_swigregister
CPyMatrixPage_swigregister(CPyMatrixPage)

class CPyMatrixPageI(CPyMatrixPage):
    __swig_setmethods__ = {}
    for _s in [CPyMatrixPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyMatrixPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyMatrixPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyMatrixPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyMatrixPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyMatrixPageI
    __del__ = lambda self: None
CPyMatrixPageI_swigregister = _PyOrigin.CPyMatrixPageI_swigregister
CPyMatrixPageI_swigregister(CPyMatrixPageI)

class CPyNotePage(CPyPageBase):
    __swig_setmethods__ = {}
    for _s in [CPyPageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyNotePage, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyPageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyNotePage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyNotePage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyNotePage
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyNotePage_IsValid(self)

    def GetText(self):
        return _PyOrigin.CPyNotePage_GetText(self)

    def SetText(self, strText):
        return _PyOrigin.CPyNotePage_SetText(self, strText)
    Text = property(GetText, SetText)
CPyNotePage_swigregister = _PyOrigin.CPyNotePage_swigregister
CPyNotePage_swigregister(CPyNotePage)

class CPyNotePageI(CPyNotePage):
    __swig_setmethods__ = {}
    for _s in [CPyNotePage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyNotePageI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyNotePage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyNotePageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyNotePageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyNotePageI
    __del__ = lambda self: None
CPyNotePageI_swigregister = _PyOrigin.CPyNotePageI_swigregister
CPyNotePageI_swigregister(CPyNotePageI)

class CPyExternalDialogPage(CPyPageBase):
    __swig_setmethods__ = {}
    for _s in [CPyPageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyExternalDialogPage, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyPageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyExternalDialogPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyExternalDialogPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyExternalDialogPage
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyExternalDialogPage_IsValid(self)
CPyExternalDialogPage_swigregister = _PyOrigin.CPyExternalDialogPage_swigregister
CPyExternalDialogPage_swigregister(CPyExternalDialogPage)

class CPyExternalDialogPageI(CPyExternalDialogPage):
    __swig_setmethods__ = {}
    for _s in [CPyExternalDialogPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyExternalDialogPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyExternalDialogPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyExternalDialogPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyExternalDialogPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyExternalDialogPageI
    __del__ = lambda self: None
CPyExternalDialogPageI_swigregister = _PyOrigin.CPyExternalDialogPageI_swigregister
CPyExternalDialogPageI_swigregister(CPyExternalDialogPageI)

class CPyLayer(CPyOriginObject):
    __swig_setmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyLayer
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyLayer_IsValid(self)

    def __len__(self):
        return _PyOrigin.CPyLayer___len__(self)

    def GetPage(self):
        return _PyOrigin.CPyLayer_GetPage(self)

    def GraphObjects(self, *args):
        return _PyOrigin.CPyLayer_GraphObjects(self, *args)

    def __iter__(self):
        return _PyOrigin.CPyLayer___iter__(self)
CPyLayer_swigregister = _PyOrigin.CPyLayer_swigregister
CPyLayer_swigregister(CPyLayer)

class CPyLayerI(CPyLayer):
    __swig_setmethods__ = {}
    for _s in [CPyLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyLayerI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyLayerI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyLayerI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyLayerI
    __del__ = lambda self: None
CPyLayerI_swigregister = _PyOrigin.CPyLayerI_swigregister
CPyLayerI_swigregister(CPyLayerI)

class CPyGraphLayer(CPyLayer):
    __swig_setmethods__ = {}
    for _s in [CPyLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyGraphLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyGraphLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyGraphLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyGraphLayer
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyGraphLayer_IsValid(self)

    def AddPlot(self, pPyRange, nPlotType):
        return _PyOrigin.CPyGraphLayer_AddPlot(self, pPyRange, nPlotType)

    def DataPlots(self, *args):
        return _PyOrigin.CPyGraphLayer_DataPlots(self, *args)

    def __getitem__(self, *args):
        return _PyOrigin.CPyGraphLayer___getitem__(self, *args)

    def __iter__(self):
        return _PyOrigin.CPyGraphLayer___iter__(self)
CPyGraphLayer_swigregister = _PyOrigin.CPyGraphLayer_swigregister
CPyGraphLayer_swigregister(CPyGraphLayer)

class CPyGraphLayerI(CPyGraphLayer):
    __swig_setmethods__ = {}
    for _s in [CPyGraphLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyGraphLayerI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyGraphLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyGraphLayerI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyGraphLayerI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyGraphLayerI
    __del__ = lambda self: None
CPyGraphLayerI_swigregister = _PyOrigin.CPyGraphLayerI_swigregister
CPyGraphLayerI_swigregister(CPyGraphLayerI)

class CPyDatasheet(CPyLayer):
    __swig_setmethods__ = {}
    for _s in [CPyLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyDatasheet, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyDatasheet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyDatasheet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyDatasheet
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyDatasheet_IsValid(self)

    def FindCol(self, lpcszLabel, nBegin=0, bCasesensitive=False, bFullMatch=True, nEnd=-1, bAllowShortName=True):
        return _PyOrigin.CPyDatasheet_FindCol(self, lpcszLabel, nBegin, bCasesensitive, bFullMatch, nEnd, bAllowShortName)

    def Cell(self, nRow, nCol):
        return _PyOrigin.CPyDatasheet_Cell(self, nRow, nCol)

    def TCell(self, nRow, nCol):
        return _PyOrigin.CPyDatasheet_TCell(self, nRow, nCol)

    def SetCell(self, *args):
        return _PyOrigin.CPyDatasheet_SetCell(self, *args)

    def Transpose(self, bSelOnly=False):
        return _PyOrigin.CPyDatasheet_Transpose(self, bSelOnly)

    def GetColCount(self):
        return _PyOrigin.CPyDatasheet_GetColCount(self)

    def SetColCount(self, nCols):
        return _PyOrigin.CPyDatasheet_SetColCount(self, nCols)
    Cols = property(GetColCount, SetColCount)

    def GetRowCount(self):
        return _PyOrigin.CPyDatasheet_GetRowCount(self)

    def SetRowCount(self, nRows):
        return _PyOrigin.CPyDatasheet_SetRowCount(self, nRows)
    Rows = property(GetRowCount, SetRowCount)

    def ClearData(self, nC1, nC2):
        return _PyOrigin.CPyDatasheet_ClearData(self, nC1, nC2)
CPyDatasheet_swigregister = _PyOrigin.CPyDatasheet_swigregister
CPyDatasheet_swigregister(CPyDatasheet)

class CPyWorksheet(CPyDatasheet):
    __swig_setmethods__ = {}
    for _s in [CPyDatasheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyWorksheet, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyDatasheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyWorksheet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyWorksheet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyWorksheet
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyWorksheet_IsValid(self)

    def GetCell(self, nRow, nCol):
        return _PyOrigin.CPyWorksheet_GetCell(self, nRow, nCol)

    def Columns(self, *args):
        return _PyOrigin.CPyWorksheet_Columns(self, *args)

    def __iter__(self):
        return _PyOrigin.CPyWorksheet___iter__(self)

    def __getitem__(self, *args):
        return _PyOrigin.CPyWorksheet___getitem__(self, *args)

    def DeleteCol(self, nColIndex):
        return _PyOrigin.CPyWorksheet_DeleteCol(self, nColIndex)

    def DeleteRow(self, nRowIndex):
        return _PyOrigin.CPyWorksheet_DeleteRow(self, nRowIndex)

    def InsertCol(self, nPos, strColName):
        return _PyOrigin.CPyWorksheet_InsertCol(self, nPos, strColName)

    def InsertRow(self, nPos):
        return _PyOrigin.CPyWorksheet_InsertRow(self, nPos)

    def SetLowerBound(self, iR1, nC1=0, nC2=-1):
        return _PyOrigin.CPyWorksheet_SetLowerBound(self, iR1, nC1, nC2)

    def SetUpperBound(self, iR2, nC1=0, nC2=-1):
        return _PyOrigin.CPyWorksheet_SetUpperBound(self, iR2, nC1, nC2)

    def ShowCol(self, nCol, nCols=1, bShow=True):
        return _PyOrigin.CPyWorksheet_ShowCol(self, nCol, nCols, bShow)

    def SetColDesignations(self, strColDesig, bRepeat=True, nC1=0, nC2=-1):
        return _PyOrigin.CPyWorksheet_SetColDesignations(self, strColDesig, bRepeat, nC1, nC2)

    def GetColFormats(self):
        return _PyOrigin.CPyWorksheet_GetColFormats(self)

    def SetColFormats(self, strFormats, bRepeat=True):
        return _PyOrigin.CPyWorksheet_SetColFormats(self, strFormats, bRepeat)

    def GetBounds(self, nC1, nC2, bIncludeMissingValues=True):
        return _PyOrigin.CPyWorksheet_GetBounds(self, nC1, nC2, bIncludeMissingValues)

    def GetSelectedColumns(self):
        return _PyOrigin.CPyWorksheet_GetSelectedColumns(self)

    def ExportASCII(self, *args):
        return _PyOrigin.CPyWorksheet_ExportASCII(self, *args)

    def SetScript(self, *args):
        return _PyOrigin.CPyWorksheet_SetScript(self, *args)

    def SetData(self, *args):
        return _PyOrigin.CPyWorksheet_SetData(self, *args)

    def GetLabelVisible(self, nLabelType):
        return _PyOrigin.CPyWorksheet_GetLabelVisible(self, nLabelType)

    def SetLabelVisible(self, nLabelType, bShow=True):
        return _PyOrigin.CPyWorksheet_SetLabelVisible(self, nLabelType, bShow)

    def GetUserDefLabel(self, nIndex):
        return _PyOrigin.CPyWorksheet_GetUserDefLabel(self, nIndex)

    def SetUserDefLabel(self, nIndex, strLabel):
        return _PyOrigin.CPyWorksheet_SetUserDefLabel(self, nIndex, strLabel)

    def ShowLabels(self, strLabels):
        return _PyOrigin.CPyWorksheet_ShowLabels(self, strLabels)

    def Copy(self, nR1=0, nC1=0, nR2=-1, nC2=-1, bFullPrecision=True):
        return _PyOrigin.CPyWorksheet_Copy(self, nR1, nC1, nR2, nC2, bFullPrecision)

    def MergeCells(self, nR1, nC1, nR2, nC2, bLabels=False):
        return _PyOrigin.CPyWorksheet_MergeCells(self, nR1, nC1, nR2, nC2, bLabels)
CPyWorksheet_swigregister = _PyOrigin.CPyWorksheet_swigregister
CPyWorksheet_swigregister(CPyWorksheet)

class CPyWorksheetI(CPyWorksheet):
    __swig_setmethods__ = {}
    for _s in [CPyWorksheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyWorksheetI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyWorksheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyWorksheetI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyWorksheetI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyWorksheetI
    __del__ = lambda self: None
CPyWorksheetI_swigregister = _PyOrigin.CPyWorksheetI_swigregister
CPyWorksheetI_swigregister(CPyWorksheetI)

class CPyMatrixsheet(CPyDatasheet):
    __swig_setmethods__ = {}
    for _s in [CPyDatasheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyMatrixsheet, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyDatasheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyMatrixsheet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyMatrixsheet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyMatrixsheet
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyMatrixsheet_IsValid(self)

    def MatrixObjects(self, *args):
        return _PyOrigin.CPyMatrixsheet_MatrixObjects(self, *args)

    def __iter__(self):
        return _PyOrigin.CPyMatrixsheet___iter__(self)

    def __getitem__(self, *args):
        return _PyOrigin.CPyMatrixsheet___getitem__(self, *args)
CPyMatrixsheet_swigregister = _PyOrigin.CPyMatrixsheet_swigregister
CPyMatrixsheet_swigregister(CPyMatrixsheet)

class CPyMatrixsheetI(CPyMatrixsheet):
    __swig_setmethods__ = {}
    for _s in [CPyMatrixsheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyMatrixsheetI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyMatrixsheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyMatrixsheetI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyMatrixsheetI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyMatrixsheetI
    __del__ = lambda self: None
CPyMatrixsheetI_swigregister = _PyOrigin.CPyMatrixsheetI_swigregister
CPyMatrixsheetI_swigregister(CPyMatrixsheetI)

class CPyDataRange(CPyOriginObject):
    __swig_setmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyDataRange, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyDataRange, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyDataRange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyDataRange
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyDataRange_IsValid(self)

    def Add(self, strType, pPyWks, nR1, nC1, nR2, nC2):
        return _PyOrigin.CPyDataRange_Add(self, strType, pPyWks, nR1, nC1, nR2, nC2)

    def AddSimple(self, pPyWks, nR1, nC1, nR2, nC2):
        return _PyOrigin.CPyDataRange_AddSimple(self, pPyWks, nR1, nC1, nR2, nC2)

    def AddMatrix(self, pPyMatrix, nIndex=0):
        return _PyOrigin.CPyDataRange_AddMatrix(self, pPyMatrix, nIndex)
CPyDataRange_swigregister = _PyOrigin.CPyDataRange_swigregister
CPyDataRange_swigregister(CPyDataRange)

class CPyDataObjectBase(CPyOriginObject):
    __swig_setmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyDataObjectBase, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyDataObjectBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyDataObjectBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyDataObjectBase
    __del__ = lambda self: None
CPyDataObjectBase_swigregister = _PyOrigin.CPyDataObjectBase_swigregister
CPyDataObjectBase_swigregister(CPyDataObjectBase)

class CPyDataObject(CPyDataObjectBase):
    __swig_setmethods__ = {}
    for _s in [CPyDataObjectBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyDataObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyDataObjectBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyDataObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyDataObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyDataObject
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyDataObject_IsValid(self)

    def SetFormula(self, *args):
        return _PyOrigin.CPyDataObject_SetFormula(self, *args)

    def GetFormula(self):
        return _PyOrigin.CPyDataObject_GetFormula(self)
    Formula = property(GetFormula, SetFormula)

    def ExecuteFormula(self, nBegin=0, nEnd=-1, nC1=-1, nC2=-1):
        return _PyOrigin.CPyDataObject_ExecuteFormula(self, nBegin, nEnd, nC1, nC2)

    def GetDigits(self):
        return _PyOrigin.CPyDataObject_GetDigits(self)

    def SetDigits(self, value):
        return _PyOrigin.CPyDataObject_SetDigits(self, value)
    Digits = property(GetDigits, SetDigits)

    def GetDigitMode(self):
        return _PyOrigin.CPyDataObject_GetDigitMode(self)

    def SetDigitMode(self, value):
        return _PyOrigin.CPyDataObject_SetDigitMode(self, value)
    DigitMode = property(GetDigitMode, SetDigitMode)

    def GetDataFormat(self):
        return _PyOrigin.CPyDataObject_GetDataFormat(self)

    def SetDataFormat(self, value):
        return _PyOrigin.CPyDataObject_SetDataFormat(self, value)
    DataFormat = property(GetDataFormat, SetDataFormat)

    def GetDisplayFormat(self):
        return _PyOrigin.CPyDataObject_GetDisplayFormat(self)

    def SetDisplayFormat(self, value):
        return _PyOrigin.CPyDataObject_SetDisplayFormat(self, value)
    DisplayFormat = property(GetDisplayFormat, SetDisplayFormat)
CPyDataObject_swigregister = _PyOrigin.CPyDataObject_swigregister
CPyDataObject_swigregister(CPyDataObject)

class CPyColumn(CPyDataObject):
    __swig_setmethods__ = {}
    for _s in [CPyDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyColumn, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyColumn, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyColumn()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyColumn
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyColumn_IsValid(self)

    def GetData(self, nStart=0, nEnd=-1):
        return _PyOrigin.CPyColumn_GetData(self, nStart, nEnd)

    def SetData(self, *args):
        return _PyOrigin.CPyColumn_SetData(self, *args)

    def SetLowerBound(self, nR1):
        return _PyOrigin.CPyColumn_SetLowerBound(self, nR1)

    def GetLowerBound(self):
        return _PyOrigin.CPyColumn_GetLowerBound(self)

    def SetUpperBound(self, nR2):
        return _PyOrigin.CPyColumn_SetUpperBound(self, nR2)

    def GetUpperBound(self):
        return _PyOrigin.CPyColumn_GetUpperBound(self)
    LowerBound = property(GetLowerBound, SetLowerBound)
    UpperBound = property(GetUpperBound, SetUpperBound)

    def PutStringArray(self, *args):
        return _PyOrigin.CPyColumn_PutStringArray(self, *args)

    def GetStringArray(self, *args):
        return _PyOrigin.CPyColumn_GetStringArray(self, *args)

    def GetX0(self):
        return _PyOrigin.CPyColumn_GetX0(self)

    def SetX0(self, dX0):
        return _PyOrigin.CPyColumn_SetX0(self, dX0)
    X0 = property(GetX0, SetX0)

    def GetX1(self):
        return _PyOrigin.CPyColumn_GetX1(self)

    def SetX1(self, dX1):
        return _PyOrigin.CPyColumn_SetX1(self, dX1)
    X1 = property(GetX1, SetX1)

    def GetFormat(self):
        return _PyOrigin.CPyColumn_GetFormat(self)

    def SetFormat(self, nFormat):
        return _PyOrigin.CPyColumn_SetFormat(self, nFormat)
    Format = property(GetFormat, SetFormat)

    def GetSubFormat(self, *args):
        return _PyOrigin.CPyColumn_GetSubFormat(self, *args)
    SubFormat = property(GetSubFormat, GetSubFormat)

    def GetUnits(self):
        return _PyOrigin.CPyColumn_GetUnits(self)

    def GetComments(self):
        return _PyOrigin.CPyColumn_GetComments(self)

    def GetParameter(self, nIndex):
        return _PyOrigin.CPyColumn_GetParameter(self, nIndex)

    def SetUnits(self, strNewValue):
        return _PyOrigin.CPyColumn_SetUnits(self, strNewValue)

    def SetComments(self, strNewValue):
        return _PyOrigin.CPyColumn_SetComments(self, strNewValue)

    def SetParameter(self, nIndex, strNewValue):
        return _PyOrigin.CPyColumn_SetParameter(self, nIndex, strNewValue)

    def GetParent(self):
        return _PyOrigin.CPyColumn_GetParent(self)

    def GetType(self):
        return _PyOrigin.CPyColumn_GetType(self)

    def SetType(self, nType):
        return _PyOrigin.CPyColumn_SetType(self, nType)
    Type = property(GetType, SetType)

    def GetUserDefLabel(self, nIndex):
        return _PyOrigin.CPyColumn_GetUserDefLabel(self, nIndex)

    def SetUserDefLabel(self, nIndex, strLabel):
        return _PyOrigin.CPyColumn_SetUserDefLabel(self, nIndex, strLabel)
    Units = property(GetUnits, SetUnits)
    Comments = property(GetComments, SetComments)
CPyColumn_swigregister = _PyOrigin.CPyColumn_swigregister
CPyColumn_swigregister(CPyColumn)

class CPyColumnI(CPyColumn):
    __swig_setmethods__ = {}
    for _s in [CPyColumn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyColumnI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyColumn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyColumnI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyColumnI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyColumnI
    __del__ = lambda self: None
CPyColumnI_swigregister = _PyOrigin.CPyColumnI_swigregister
CPyColumnI_swigregister(CPyColumnI)

class CPyMatrixObject(CPyDataObject):
    __swig_setmethods__ = {}
    for _s in [CPyDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyMatrixObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyMatrixObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyMatrixObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyMatrixObject
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyMatrixObject_IsValid(self)

    def GetData(self, nMR1=0, nMC1=0, nMR2=-1, nMC2=-1):
        return _PyOrigin.CPyMatrixObject_GetData(self, nMR1, nMC1, nMR2, nMC2)

    def SetData(self, *args):
        return _PyOrigin.CPyMatrixObject_SetData(self, *args)

    def GetXY(self):
        return _PyOrigin.CPyMatrixObject_GetXY(self)

    def SetXY(self, varValues):
        return _PyOrigin.CPyMatrixObject_SetXY(self, varValues)

    def HasBitmap(self, bExcludeLeadBitmap):
        return _PyOrigin.CPyMatrixObject_HasBitmap(self, bExcludeLeadBitmap)
CPyMatrixObject_swigregister = _PyOrigin.CPyMatrixObject_swigregister
CPyMatrixObject_swigregister(CPyMatrixObject)

class CPyMatrixObjectI(CPyMatrixObject):
    __swig_setmethods__ = {}
    for _s in [CPyMatrixObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyMatrixObjectI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyMatrixObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyMatrixObjectI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyMatrixObjectI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyMatrixObjectI
    __del__ = lambda self: None
CPyMatrixObjectI_swigregister = _PyOrigin.CPyMatrixObjectI_swigregister
CPyMatrixObjectI_swigregister(CPyMatrixObjectI)

class CPyDataPlot(CPyDataObjectBase):
    __swig_setmethods__ = {}
    for _s in [CPyDataObjectBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyDataPlot, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyDataObjectBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyDataPlot, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyDataPlot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyDataPlot
    __del__ = lambda self: None
CPyDataPlot_swigregister = _PyOrigin.CPyDataPlot_swigregister
CPyDataPlot_swigregister(CPyDataPlot)

class CPyDataPlotI(CPyDataPlot):
    __swig_setmethods__ = {}
    for _s in [CPyDataPlot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyDataPlotI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyDataPlot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyDataPlotI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyDataPlotI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyDataPlotI
    __del__ = lambda self: None
CPyDataPlotI_swigregister = _PyOrigin.CPyDataPlotI_swigregister
CPyDataPlotI_swigregister(CPyDataPlotI)

class CPyGraphObject(CPyOriginObject):
    __swig_setmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyGraphObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyGraphObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyGraphObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyGraphObject
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyGraphObject_IsValid(self)

    def GetObjectType(self):
        return _PyOrigin.CPyGraphObject_GetObjectType(self)

    def GetText(self):
        return _PyOrigin.CPyGraphObject_GetText(self)

    def SetText(self, strText):
        return _PyOrigin.CPyGraphObject_SetText(self, strText)

    def GetLeft(self):
        return _PyOrigin.CPyGraphObject_GetLeft(self)

    def SetLeft(self, nLeft):
        return _PyOrigin.CPyGraphObject_SetLeft(self, nLeft)

    def GetTop(self):
        return _PyOrigin.CPyGraphObject_GetTop(self)

    def SetTop(self, nTop):
        return _PyOrigin.CPyGraphObject_SetTop(self, nTop)

    def GetWidth(self):
        return _PyOrigin.CPyGraphObject_GetWidth(self)

    def SetWidth(self, nWidth):
        return _PyOrigin.CPyGraphObject_SetWidth(self, nWidth)

    def GetHeight(self):
        return _PyOrigin.CPyGraphObject_GetHeight(self)

    def SetHeight(self, nHeight):
        return _PyOrigin.CPyGraphObject_SetHeight(self, nHeight)

    def GetX(self):
        return _PyOrigin.CPyGraphObject_GetX(self)

    def SetX(self, dX):
        return _PyOrigin.CPyGraphObject_SetX(self, dX)

    def GetY(self):
        return _PyOrigin.CPyGraphObject_GetY(self)

    def SetY(self, dY):
        return _PyOrigin.CPyGraphObject_SetY(self, dY)

    def GetDX(self):
        return _PyOrigin.CPyGraphObject_GetDX(self)

    def SetDX(self, dDX):
        return _PyOrigin.CPyGraphObject_SetDX(self, dDX)

    def GetDY(self):
        return _PyOrigin.CPyGraphObject_GetDY(self)

    def SetDY(self, dDY):
        return _PyOrigin.CPyGraphObject_SetDY(self, dDY)
    Text = property(GetText, SetText)
    Left = property(GetLeft, SetLeft)
    Top = property(GetTop, SetTop)
    Width = property(GetWidth, SetWidth)
    Height = property(GetHeight, SetHeight)
    X = property(GetX, SetX)
    Y = property(GetY, SetY)
    DX = property(GetDX, SetDX)
    DY = property(GetDY, SetDY)
CPyGraphObject_swigregister = _PyOrigin.CPyGraphObject_swigregister
CPyGraphObject_swigregister(CPyGraphObject)

class CPyGraphObjectI(CPyGraphObject):
    __swig_setmethods__ = {}
    for _s in [CPyGraphObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyGraphObjectI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyGraphObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyGraphObjectI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyGraphObjectI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyGraphObjectI
    __del__ = lambda self: None
CPyGraphObjectI_swigregister = _PyOrigin.CPyGraphObjectI_swigregister
CPyGraphObjectI_swigregister(CPyGraphObjectI)

class CPyProjectInfo(CPyOriginObject):
    __swig_setmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyProjectInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyProjectInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyProjectInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyProjectInfo
    __del__ = lambda self: None

    def GetVersion(self):
        return _PyOrigin.CPyProjectInfo_GetVersion(self)

    def GetOrgVersion(self):
        return _PyOrigin.CPyProjectInfo_GetOrgVersion(self)
CPyProjectInfo_swigregister = _PyOrigin.CPyProjectInfo_swigregister
CPyProjectInfo_swigregister(CPyProjectInfo)

class CPyFolder(CPyOriginObject):
    __swig_setmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyFolder, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyFolder, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyFolder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyFolder
    __del__ = lambda self: None

    def Path(self):
        return _PyOrigin.CPyFolder_Path(self)

    def GetIndex(self):
        return _PyOrigin.CPyFolder_GetIndex(self)

    def GetResultText(self, bRecrsive):
        return _PyOrigin.CPyFolder_GetResultText(self, bRecrsive)

    def GetParent(self):
        return _PyOrigin.CPyFolder_GetParent(self)

    def PageBases(self):
        return _PyOrigin.CPyFolder_PageBases(self)

    def __iter__(self):
        return _PyOrigin.CPyFolder___iter__(self)
CPyFolder_swigregister = _PyOrigin.CPyFolder_swigregister
CPyFolder_swigregister(CPyFolder)

class CPyTreeNode(CPyOriginObject):
    __swig_setmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyTreeNode, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyTreeNode, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyTreeNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyTreeNode
    __del__ = lambda self: None

    def __str__(self):
        return _PyOrigin.CPyTreeNode___str__(self)

    def IsValid(self):
        return _PyOrigin.CPyTreeNode_IsValid(self)

    def GetStrValue(self, *args):
        return _PyOrigin.CPyTreeNode_GetStrValue(self, *args)

    def SetStrValue(self, *args):
        return _PyOrigin.CPyTreeNode_SetStrValue(self, *args)

    def GetIntValue(self, *args):
        return _PyOrigin.CPyTreeNode_GetIntValue(self, *args)

    def SetIntValue(self, *args):
        return _PyOrigin.CPyTreeNode_SetIntValue(self, *args)

    def GetDoubleValue(self, *args):
        return _PyOrigin.CPyTreeNode_GetDoubleValue(self, *args)

    def SetDoubleValue(self, *args):
        return _PyOrigin.CPyTreeNode_SetDoubleValue(self, *args)

    def Children(self):
        return _PyOrigin.CPyTreeNode_Children(self)

    def __iter__(self):
        return _PyOrigin.CPyTreeNode___iter__(self)

    def FirstChild(self):
        return _PyOrigin.CPyTreeNode_FirstChild(self)

    def NextSibling(self):
        return _PyOrigin.CPyTreeNode_NextSibling(self)
CPyTreeNode_swigregister = _PyOrigin.CPyTreeNode_swigregister
CPyTreeNode_swigregister(CPyTreeNode)

class CPyTreeNodeI(CPyTreeNode):
    __swig_setmethods__ = {}
    for _s in [CPyTreeNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyTreeNodeI, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyTreeNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyTreeNodeI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyTreeNodeI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyTreeNodeI
    __del__ = lambda self: None
CPyTreeNodeI_swigregister = _PyOrigin.CPyTreeNodeI_swigregister
CPyTreeNodeI_swigregister(CPyTreeNodeI)

class CPyColorMap(CPyOriginObject):
    __swig_setmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyColorMap, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyColorMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyColorMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyColorMap
    __del__ = lambda self: None
CPyColorMap_swigregister = _PyOrigin.CPyColorMap_swigregister
CPyColorMap_swigregister(CPyColorMap)

class CPyOriginCollectionBase(CPyOriginBase):
    __swig_setmethods__ = {}
    for _s in [CPyOriginBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionBase, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionBase
    __del__ = lambda self: None

    def __iter__(self):
        return _PyOrigin.CPyOriginCollectionBase___iter__(self)

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionBase___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionBase_next(self)

    def __len__(self):
        return _PyOrigin.CPyOriginCollectionBase___len__(self)

    def GetCount(self):
        return _PyOrigin.CPyOriginCollectionBase_GetCount(self)

    def	__iter__(self):
    	return self

CPyOriginCollectionBase_swigregister = _PyOrigin.CPyOriginCollectionBase_swigregister
CPyOriginCollectionBase_swigregister(CPyOriginCollectionBase)

class CPyOriginCollectionPagesBase(CPyOriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionPagesBase, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionPagesBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionPagesBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionPagesBase
    __del__ = lambda self: None

    def IsValid(self):
        return _PyOrigin.CPyOriginCollectionPagesBase_IsValid(self)

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionPagesBase___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionPagesBase_next(self)
CPyOriginCollectionPagesBase_swigregister = _PyOrigin.CPyOriginCollectionPagesBase_swigregister
CPyOriginCollectionPagesBase_swigregister(CPyOriginCollectionPagesBase)

class CPyOriginCollectionPages(CPyOriginCollectionPagesBase):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionPagesBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionPages, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionPagesBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionPages
    __del__ = lambda self: None

    def __call__(self, strPageName):
        return _PyOrigin.CPyOriginCollectionPages___call__(self, strPageName)

    def __getitem__(self, strPageName):
        return _PyOrigin.CPyOriginCollectionPages___getitem__(self, strPageName)

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionPages___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionPages_next(self)
CPyOriginCollectionPages_swigregister = _PyOrigin.CPyOriginCollectionPages_swigregister
CPyOriginCollectionPages_swigregister(CPyOriginCollectionPages)

class CPyOriginCollectionWorksheetPages(CPyOriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionWorksheetPages, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionWorksheetPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionWorksheetPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionWorksheetPages
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionWorksheetPages___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionWorksheetPages_next(self)
CPyOriginCollectionWorksheetPages_swigregister = _PyOrigin.CPyOriginCollectionWorksheetPages_swigregister
CPyOriginCollectionWorksheetPages_swigregister(CPyOriginCollectionWorksheetPages)

class CPyOriginCollectionMatrixPages(CPyOriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionMatrixPages, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionMatrixPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionMatrixPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionMatrixPages
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionMatrixPages___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionMatrixPages_next(self)
CPyOriginCollectionMatrixPages_swigregister = _PyOrigin.CPyOriginCollectionMatrixPages_swigregister
CPyOriginCollectionMatrixPages_swigregister(CPyOriginCollectionMatrixPages)

class CPyOriginCollectionGraphPages(CPyOriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionGraphPages, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionGraphPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionGraphPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionGraphPages
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionGraphPages___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionGraphPages_next(self)
CPyOriginCollectionGraphPages_swigregister = _PyOrigin.CPyOriginCollectionGraphPages_swigregister
CPyOriginCollectionGraphPages_swigregister(CPyOriginCollectionGraphPages)

class CPyOriginCollectionLayoutPages(CPyOriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionLayoutPages, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionLayoutPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionLayoutPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionLayoutPages
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionLayoutPages___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionLayoutPages_next(self)
CPyOriginCollectionLayoutPages_swigregister = _PyOrigin.CPyOriginCollectionLayoutPages_swigregister
CPyOriginCollectionLayoutPages_swigregister(CPyOriginCollectionLayoutPages)

class CPyOriginCollectionDataPlots(CPyOriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionDataPlots, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionDataPlots, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionDataPlots()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionDataPlots
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionDataPlots___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionDataPlots_next(self)
CPyOriginCollectionDataPlots_swigregister = _PyOrigin.CPyOriginCollectionDataPlots_swigregister
CPyOriginCollectionDataPlots_swigregister(CPyOriginCollectionDataPlots)

class CPyOriginCollectionGraphObjects(CPyOriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionGraphObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionGraphObjects, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionGraphObjects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionGraphObjects
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionGraphObjects___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionGraphObjects_next(self)
CPyOriginCollectionGraphObjects_swigregister = _PyOrigin.CPyOriginCollectionGraphObjects_swigregister
CPyOriginCollectionGraphObjects_swigregister(CPyOriginCollectionGraphObjects)

class CPyOriginCollectionLayers(CPyOriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionLayers, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionLayers, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionLayers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionLayers
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionLayers___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionLayers_next(self)
CPyOriginCollectionLayers_swigregister = _PyOrigin.CPyOriginCollectionLayers_swigregister
CPyOriginCollectionLayers_swigregister(CPyOriginCollectionLayers)

class CPyOriginCollectionGraphLayer(CPyOriginCollectionLayers):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionLayers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionGraphLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionLayers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionGraphLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionGraphLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionGraphLayer
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionGraphLayer___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionGraphLayer_next(self)
CPyOriginCollectionGraphLayer_swigregister = _PyOrigin.CPyOriginCollectionGraphLayer_swigregister
CPyOriginCollectionGraphLayer_swigregister(CPyOriginCollectionGraphLayer)

class CPyOriginCollectionWorksheets(CPyOriginCollectionLayers):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionLayers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionWorksheets, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionLayers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionWorksheets, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionWorksheets()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionWorksheets
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionWorksheets___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionWorksheets_next(self)
CPyOriginCollectionWorksheets_swigregister = _PyOrigin.CPyOriginCollectionWorksheets_swigregister
CPyOriginCollectionWorksheets_swigregister(CPyOriginCollectionWorksheets)

class CPyOriginCollectionColumns(CPyOriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionColumns, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionColumns, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionColumns()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionColumns
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionColumns___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionColumns_next(self)
CPyOriginCollectionColumns_swigregister = _PyOrigin.CPyOriginCollectionColumns_swigregister
CPyOriginCollectionColumns_swigregister(CPyOriginCollectionColumns)

class CPyOriginCollectionMatrixsheets(CPyOriginCollectionLayers):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionLayers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionMatrixsheets, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionLayers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionMatrixsheets, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionMatrixsheets()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionMatrixsheets
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionMatrixsheets___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionMatrixsheets_next(self)
CPyOriginCollectionMatrixsheets_swigregister = _PyOrigin.CPyOriginCollectionMatrixsheets_swigregister
CPyOriginCollectionMatrixsheets_swigregister(CPyOriginCollectionMatrixsheets)

class CPyOriginCollectionMatrixObjects(CPyOriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionMatrixObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionMatrixObjects, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionMatrixObjects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionMatrixObjects
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionMatrixObjects___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionMatrixObjects_next(self)
CPyOriginCollectionMatrixObjects_swigregister = _PyOrigin.CPyOriginCollectionMatrixObjects_swigregister
CPyOriginCollectionMatrixObjects_swigregister(CPyOriginCollectionMatrixObjects)

class CPyOriginCollectionTreeNodes(CPyOriginCollectionPagesBase):
    __swig_setmethods__ = {}
    for _s in [CPyOriginCollectionPagesBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPyOriginCollectionTreeNodes, name, value)
    __swig_getmethods__ = {}
    for _s in [CPyOriginCollectionPagesBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPyOriginCollectionTreeNodes, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyOrigin.new_CPyOriginCollectionTreeNodes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyOrigin.delete_CPyOriginCollectionTreeNodes
    __del__ = lambda self: None

    def __next__(self):
        return _PyOrigin.CPyOriginCollectionTreeNodes___next__(self)

    def next(self):
        return _PyOrigin.CPyOriginCollectionTreeNodes_next(self)
CPyOriginCollectionTreeNodes_swigregister = _PyOrigin.CPyOriginCollectionTreeNodes_swigregister
CPyOriginCollectionTreeNodes_swigregister(CPyOriginCollectionTreeNodes)

GROBJTYPE_UNKNOWN = _PyOrigin.GROBJTYPE_UNKNOWN
GROBJTYPE_GROUP = _PyOrigin.GROBJTYPE_GROUP
GROBJTYPE_TEXT = _PyOrigin.GROBJTYPE_TEXT
GROBJTYPE_LEGEND = _PyOrigin.GROBJTYPE_LEGEND
GROBJTYPE_LINE2 = _PyOrigin.GROBJTYPE_LINE2
GROBJTYPE_LINE4 = _PyOrigin.GROBJTYPE_LINE4
GROBJTYPE_POLYLINE = _PyOrigin.GROBJTYPE_POLYLINE
GROBJTYPE_BEZIER = _PyOrigin.GROBJTYPE_BEZIER
GROBJTYPE_RECT = _PyOrigin.GROBJTYPE_RECT
GROBJTYPE_ELLIPSE = _PyOrigin.GROBJTYPE_ELLIPSE
GROBJTYPE_TRIANGLE = _PyOrigin.GROBJTYPE_TRIANGLE
GROBJTYPE_POLYGON = _PyOrigin.GROBJTYPE_POLYGON
GROBJTYPE_POLYGONBEZIER = _PyOrigin.GROBJTYPE_POLYGONBEZIER
GROBJTYPE_COLORSCALE = _PyOrigin.GROBJTYPE_COLORSCALE
GROBJTYPE_BITMAP = _PyOrigin.GROBJTYPE_BITMAP
GROBJTYPE_METAFILE = _PyOrigin.GROBJTYPE_METAFILE
GROBJTYPE_EMETAFILE = _PyOrigin.GROBJTYPE_EMETAFILE
GROBJTYPE_MEMORY = _PyOrigin.GROBJTYPE_MEMORY
GROBJTYPE_LINK = _PyOrigin.GROBJTYPE_LINK
GROBJTYPE_EMBEDDED = _PyOrigin.GROBJTYPE_EMBEDDED
GROBJTYPE_RAKE = _PyOrigin.GROBJTYPE_RAKE
GROBJTYPE_POLYPOLYGON = _PyOrigin.GROBJTYPE_POLYPOLYGON
GROBJTYPE_POLYPOLYLINE = _PyOrigin.GROBJTYPE_POLYPOLYLINE
GROBJTYPE_DATASELECTOR = _PyOrigin.GROBJTYPE_DATASELECTOR
GROBJTYPE_MARKER = _PyOrigin.GROBJTYPE_MARKER
GROBJTYPE_CURSOR = _PyOrigin.GROBJTYPE_CURSOR
GROBJTYPE_TABLE = _PyOrigin.GROBJTYPE_TABLE
GROBJTYPE_SCALER = _PyOrigin.GROBJTYPE_SCALER
GROBJTYPE_BUBBLE_LEGEND = _PyOrigin.GROBJTYPE_BUBBLE_LEGEND
GROBJTYPE_IMG = _PyOrigin.GROBJTYPE_IMG
GROBJTYPE_GROUP_ROOT = _PyOrigin.GROBJTYPE_GROUP_ROOT
LABEL_LONG_NAME = _PyOrigin.LABEL_LONG_NAME
LABEL_UNITS = _PyOrigin.LABEL_UNITS
LABEL_COMMENTS = _PyOrigin.LABEL_COMMENTS
LABEL_PARAM = _PyOrigin.LABEL_PARAM
LABEL_SAMPLE_RATE = _PyOrigin.LABEL_SAMPLE_RATE
LABEL_SPARKLINE = _PyOrigin.LABEL_SPARKLINE
LABEL_UDL = _PyOrigin.LABEL_UDL
LABEL_REPLICATES = _PyOrigin.LABEL_REPLICATES
LABEL_COL_FILTER = _PyOrigin.LABEL_COL_FILTER
LABEL_FORMULA = _PyOrigin.LABEL_FORMULA
LABEL_CATEGORIES = _PyOrigin.LABEL_CATEGORIES
STORAGETYPE_INI = _PyOrigin.STORAGETYPE_INI
STORAGETYPE_BINARY = _PyOrigin.STORAGETYPE_BINARY
STORAGETYPE_ALL = _PyOrigin.STORAGETYPE_ALL
COLFORMAT_NUMERIC = _PyOrigin.COLFORMAT_NUMERIC
COLFORMAT_TEXT = _PyOrigin.COLFORMAT_TEXT
COLFORMAT_TIME = _PyOrigin.COLFORMAT_TIME
COLFORMAT_DATE = _PyOrigin.COLFORMAT_DATE
COLFORMAT_MONTH = _PyOrigin.COLFORMAT_MONTH
COLFORMAT_WEEKDAY = _PyOrigin.COLFORMAT_WEEKDAY
COLFORMAT_TEXT_NUMERIC = _PyOrigin.COLFORMAT_TEXT_NUMERIC
COLTYPE_DESIGN_INVALID = _PyOrigin.COLTYPE_DESIGN_INVALID
COLTYPE_DESIGN_X = _PyOrigin.COLTYPE_DESIGN_X
COLTYPE_DESIGN_Y = _PyOrigin.COLTYPE_DESIGN_Y
COLTYPE_DESIGN_Z = _PyOrigin.COLTYPE_DESIGN_Z
COLTYPE_DESIGN_L = _PyOrigin.COLTYPE_DESIGN_L
COLTYPE_DESIGN_NONE = _PyOrigin.COLTYPE_DESIGN_NONE
COLTYPE_DESIGN_XERR = _PyOrigin.COLTYPE_DESIGN_XERR
COLTYPE_DESIGN_YERR = _PyOrigin.COLTYPE_DESIGN_YERR
COLTYPE_DESIGN_GROUP = _PyOrigin.COLTYPE_DESIGN_GROUP
COLTYPE_DESIGN_SUBJECT = _PyOrigin.COLTYPE_DESIGN_SUBJECT
COLTYPE_DESIGN_WEIGHT = _PyOrigin.COLTYPE_DESIGN_WEIGHT

def OriginVer():
    return _PyOrigin.OriginVer()
OriginVer = _PyOrigin.OriginVer

def SetAsChildren(nPyWndID):
    return _PyOrigin.SetAsChildren(nPyWndID)
SetAsChildren = _PyOrigin.SetAsChildren

def GetPage(strPageName):
    return _PyOrigin.GetPage(strPageName)
GetPage = _PyOrigin.GetPage

def Pages(*args):
    return _PyOrigin.Pages(*args)
Pages = _PyOrigin.Pages

def WorksheetPages(*args):
    return _PyOrigin.WorksheetPages(*args)
WorksheetPages = _PyOrigin.WorksheetPages

def ActiveLayer():
    return _PyOrigin.ActiveLayer()
ActiveLayer = _PyOrigin.ActiveLayer

def ActivePage():
    return _PyOrigin.ActivePage()
ActivePage = _PyOrigin.ActivePage

def ActiveFolder():
    return _PyOrigin.ActiveFolder()
ActiveFolder = _PyOrigin.ActiveFolder

def GetProjectName():
    return _PyOrigin.GetProjectName()
GetProjectName = _PyOrigin.GetProjectName
PATHTYPE_PROJECT = _PyOrigin.PATHTYPE_PROJECT
PATHTYPE_USER = _PyOrigin.PATHTYPE_USER
PATHTYPE_GROUP = _PyOrigin.PATHTYPE_GROUP
PATHTYPE_SYSTEM = _PyOrigin.PATHTYPE_SYSTEM
PATHTYPE_SYSTEMP = _PyOrigin.PATHTYPE_SYSTEMP
PATHTYPE_APPS = _PyOrigin.PATHTYPE_APPS

def GetPath(nPathType=PATHTYPE_PROJECT):
    return _PyOrigin.GetPath(nPathType)
GetPath = _PyOrigin.GetPath

def GetRootFolder():
    return _PyOrigin.GetRootFolder()
GetRootFolder = _PyOrigin.GetRootFolder

def MatrixPages(*args):
    return _PyOrigin.MatrixPages(*args)
MatrixPages = _PyOrigin.MatrixPages

def GraphPages(*args):
    return _PyOrigin.GraphPages(*args)
GraphPages = _PyOrigin.GraphPages

def LayoutPages(*args):
    return _PyOrigin.LayoutPages(*args)
LayoutPages = _PyOrigin.LayoutPages

def FindGraphLayer(Name):
    return _PyOrigin.FindGraphLayer(Name)
FindGraphLayer = _PyOrigin.FindGraphLayer

def FindMatrixSheet(Name):
    return _PyOrigin.FindMatrixSheet(Name)
FindMatrixSheet = _PyOrigin.FindMatrixSheet

def FindWorksheet(Name):
    return _PyOrigin.FindWorksheet(Name)
FindWorksheet = _PyOrigin.FindWorksheet

def ActiveNotePage():
    return _PyOrigin.ActiveNotePage()
ActiveNotePage = _PyOrigin.ActiveNotePage

def GetTree(strName):
    return _PyOrigin.GetTree(strName)
GetTree = _PyOrigin.GetTree

def EmptyTree():
    return _PyOrigin.EmptyTree()
EmptyTree = _PyOrigin.EmptyTree
PGTYPE_WKS = _PyOrigin.PGTYPE_WKS
PGTYPE_MATRIX = _PyOrigin.PGTYPE_MATRIX
PGTYPE_GRAPH = _PyOrigin.PGTYPE_GRAPH
PGTYPE_NOTES = _PyOrigin.PGTYPE_NOTES
PGTYPE_LAYOUT = _PyOrigin.PGTYPE_LAYOUT

def CreatePage(*args):
    return _PyOrigin.CreatePage(*args)
CreatePage = _PyOrigin.CreatePage

def GetNotePage(strPageName):
    return _PyOrigin.GetNotePage(strPageName)
GetNotePage = _PyOrigin.GetNotePage

def CreateNotePage(*args):
    return _PyOrigin.CreateNotePage(*args)
CreateNotePage = _PyOrigin.CreateNotePage

def GetProjectInfo():
    return _PyOrigin.GetProjectInfo()
GetProjectInfo = _PyOrigin.GetProjectInfo

def NewDataRange():
    return _PyOrigin.NewDataRange()
NewDataRange = _PyOrigin.NewDataRange

def SetModified(bNewValue):
    return _PyOrigin.SetModified(bNewValue)
SetModified = _PyOrigin.SetModified

def IsModified():
    return _PyOrigin.IsModified()
IsModified = _PyOrigin.IsModified

def DestroyPage(strPageName):
    return _PyOrigin.DestroyPage(strPageName)
DestroyPage = _PyOrigin.DestroyPage

def Reset(bReduceWks, bReduceMat):
    return _PyOrigin.Reset(bReduceWks, bReduceMat)
Reset = _PyOrigin.Reset

def Save(strPathName):
    return _PyOrigin.Save(strPathName)
Save = _PyOrigin.Save

def Load(strPath, bReadOnly=False):
    return _PyOrigin.Load(strPath, bReadOnly)
Load = _PyOrigin.Load

def AddTree(strName, trNode):
    return _PyOrigin.AddTree(strName, trNode)
AddTree = _PyOrigin.AddTree

def Run():
    return _PyOrigin.Run()
Run = _PyOrigin.Run

def LTVars(*args):
    return _PyOrigin.LTVars(*args)
LTVars = _PyOrigin.LTVars

def LTStrVars(*args):
    return _PyOrigin.LTStrVars(*args)
LTStrVars = _PyOrigin.LTStrVars

def LT_execute(lpcszScript):
    return _PyOrigin.LT_execute(lpcszScript)
LT_execute = _PyOrigin.LT_execute

def LT_get_str(lpcszVar):
    return _PyOrigin.LT_get_str(lpcszVar)
LT_get_str = _PyOrigin.LT_get_str

def LT_set_str(lpcszVar, lpcszVal):
    return _PyOrigin.LT_set_str(lpcszVar, lpcszVal)
LT_set_str = _PyOrigin.LT_set_str

def LT_get_var(lpcszVar):
    return _PyOrigin.LT_get_var(lpcszVar)
LT_get_var = _PyOrigin.LT_get_var

def LT_set_var(lpcszVar, dValue):
    return _PyOrigin.LT_set_var(lpcszVar, dValue)
LT_set_var = _PyOrigin.LT_set_var

def LT_GetCurrentThreadId():
    return _PyOrigin.LT_GetCurrentThreadId()
LT_GetCurrentThreadId = _PyOrigin.LT_GetCurrentThreadId

def XF(*args):
    return _PyOrigin.XF(*args)
XF = _PyOrigin.XF
# This file is compatible with both classic and new-style classes.

cvar = _PyOrigin.cvar
MISSINGVALUE = cvar.MISSINGVALUE
JULIANDATEOFFSET = cvar.JULIANDATEOFFSET

